from "string.cpl" import prints gets itoa;

:
Brainfuck interpriter on CPL
For work test, input ++++++++[>++++++++<-]>+. sequence. Interpriter should return 'A' character.
Also hello world program
++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.

Or tick-tac-toe

:

glob arr tape 30000 char =;
glob arr code 10000 char =;
glob arr bracketmap 10000 int =;
glob arr stack 10000 int =;

start
    prints("Brainfuck interpriter! Input code: ");

    int codelength = gets(code, 10000);
    int stackptr = 0;
    int pos = 0;

    char brk            = 0;  : 0 :
    char plus           = 43; : + :
    char minus          = 45; : - :
    char dot            = 46; : . :
    char comma          = 44; : , :
    char leftMove       = 60; : < :
    char rightMove      = 62; : > :
    char openBracket    = 91; : [ :
    char closedBracket  = 93; : ] :

    while pos < codelength; {
        char c = code[pos];
        int handled = 0;

        switch c; {
            case openBracket; {
                stack[stackptr] = pos;
                stackptr = stackptr + 1;
            }
            case closedBracket; {
                if stackptr > 0; {
                    stackptr = stackptr - 1;
                    int matchpos = stack[stackptr];
                    bracketmap[pos] = matchpos;
                    bracketmap[matchpos] = pos;
                }
            }
        }
        
        pos = pos + 1;
    }
    
    int pointer = 0;
    int pc = 0;

    while pc < codelength; {
        switch code[pc]; {
            case rightMove; {
                pointer = pointer + 1;
                pc = pc + 1;
            }
            case leftMove; {
                pointer = pointer - 1;
                pc = pc + 1;
            }
            case plus; {
                tape[pointer] = tape[pointer] + 1;
                pc = pc + 1;
            }
            case minus; {
                tape[pointer] = tape[pointer] - 1;
                pc = pc + 1;
            }
            case dot; {
                arr fbuf 3 char = ' ' 0;
                fbuf[0] = tape[pointer];
                prints(fbuf);
                pc = pc + 1;
            }
            case comma; {
                arr sbuf 3 char = ' ' ' ' 0;
                gets(sbuf, 2);
                tape[pointer] = sbuf[0];
                pc = pc + 1;
            }
            case openBracket; {
                if tape[pointer] == brk; {
                    pc = bracketmap[pc] + 1;
                }
                else {
                    pc = pc + 1;
                }
            }
            case closedBracket; {
                if tape[pointer] != brk; {
                    pc = bracketmap[pc] + 1;
                }
                else {
                    pc = pc + 1;
                }
            }
            default {
                pc = pc + 1;
            }
        }
    }

exit 0;